import React, { useMemo } from 'react';
import { View } from 'react-native';
import { styles } from './styles';
import { throttle } from '../utils/throttle';
export const getDefaultPanRNGesture = (Gesture, dispatchEvents) => {
  return Gesture.Pan().runOnJS(true).withTestId('RNGH-pan-handler').maxPointers(1).onBegin(e => {
    dispatchEvents(['mousedown', 'mousemove'], e);
  }).onUpdate(throttle(e => {
    dispatchEvents(['mousemove'], e);
  }, 50)).onEnd(e => {
    dispatchEvents(['mouseup'], e);
  });
};
export const getDefaultPinchRNGesture = (Gesture, dispatchEvents) => {
  return Gesture.Pinch().runOnJS(true).withTestId('RNGH-pinch-handler').onUpdate(throttle(e => {
    dispatchEvents(['mousewheel'], e, {
      zrX: e.focalX,
      zrY: e.focalY,
      zrDelta: e.velocity / 20
    });
  }, 50));
};
export const getDefaultTapRNGesture = (Gesture, dispatchEvents) => {
  return Gesture.Tap().runOnJS(true).withTestId('RNGH-tap-handler').onStart(e => {
    dispatchEvents(['mousedown', 'mousemove'], e);
  }).onEnd(e => {
    dispatchEvents(['mouseup', 'click'], e);
  });
};
export const getDefaultRNGestures = (Gesture, dispatchEvents) => {
  return [getDefaultPanRNGesture(Gesture, dispatchEvents), getDefaultPinchRNGesture(Gesture, dispatchEvents), getDefaultTapRNGesture(Gesture, dispatchEvents)];
};
export function RNGestureHandler({
  RNGH,
  dispatchEvents,
  gesture: gestureProp
}) {
  const {
    Gesture,
    GestureDetector
  } = RNGH;
  const defaultGestures = useMemo(() => getDefaultRNGestures(Gesture, dispatchEvents), [dispatchEvents, Gesture]);
  const propGesture = useMemo(() => {
    if (!gestureProp) {
      return defaultGestures;
    }
    if (typeof gestureProp === 'function') {
      return gestureProp(defaultGestures, dispatchEvents);
    }
    return gestureProp;
  }, [defaultGestures, dispatchEvents, gestureProp]);
  const gesture = useMemo(() => {
    if (Array.isArray(propGesture)) {
      return Gesture.Race(...propGesture);
    }
    return propGesture;
  }, [Gesture, propGesture]);
  return /*#__PURE__*/React.createElement(GestureDetector, {
    gesture: gesture
  }, /*#__PURE__*/React.createElement(View, {
    testID: "gesture-handler",
    style: styles.GestureView
  }));
}
//# sourceMappingURL=RNGestureHandler.js.map