function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useState, useImperativeHandle, forwardRef, memo, useCallback, useRef } from 'react';
import { Canvas, ImageSVG, Skia, useCanvasRef } from '@shopify/react-native-skia';
import { View } from 'react-native';
import { setPlatformAPI
// DEFAULT_FONT_FAMILY as zrenderFontFamily,
} from 'zrender/lib/core/platform';
// import { DEFAULT_FONT_FAMILY } from './utils/font';
import { measureText } from './utils/platform';
import { GestureHandler } from './components/GestureHandler';
import { dispatchEventsToZRender } from './components/events';
export { SVGRenderer } from './SVGRenderer';
export * from './types';
setPlatformAPI({
  measureText
});
function getSkSvg(svg) {
  // TODO: 全局替换字体做法比较暴力，或者实用定义字体，可能某些场景字体设置失效，需要修复
  // if (svg) {
  //   svg = svg.replace(new RegExp(zrenderFontFamily, 'g'), DEFAULT_FONT_FAMILY)
  //   console.log('svg', svg)
  // }
  const initString = svg ? Skia.SVG.MakeFromString(svg) : undefined;
  return initString ?? undefined;
}
function SkiaComponent(props, ref) {
  const {
    svg,
    handleGesture = true,
    width: inlineWidth,
    height: inlineHeight,
    style,
    ...gestureProps
  } = props;
  const initialWidth = inlineWidth || (style === null || style === void 0 ? void 0 : style.width);
  const initialHeight = inlineHeight || (style === null || style === void 0 ? void 0 : style.height);
  const [svgString, setSvgString] = useState(getSkSvg(svg));
  const [width, setWidth] = useState(initialWidth ?? 0);
  const [height, setHeight] = useState(initialHeight ?? 0);
  const zrenderId = useRef();
  const canvasRef = useCanvasRef === null || useCanvasRef === void 0 ? void 0 : useCanvasRef();
  const dispatchEvents = useCallback((types, nativeEvent, eventArgs) => {
    if (zrenderId.current === undefined) return;
    dispatchEventsToZRender(zrenderId.current, types, nativeEvent, eventArgs);
  }, []);
  useImperativeHandle(ref, () => ({
    elm: {
      setAttribute: (name, value) => {
        if (name === 'width') {
          setWidth(value);
        }
        if (name === 'height') {
          setHeight(value);
        }
      },
      setAttributeNS: (_name, _value) => {},
      removeAttribute: _name => {},
      patchString: (_oldVnode, vnode) => {
        const _svgString = getSkSvg(vnode);
        setSvgString(_svgString);
      },
      setZrenderId: id => {
        zrenderId.current = id;
      },
      makeImageSnapshot: () => {
        var _canvasRef$current;
        const image = canvasRef === null || canvasRef === void 0 || (_canvasRef$current = canvasRef.current) === null || _canvasRef$current === void 0 ? void 0 : _canvasRef$current.makeImageSnapshot();
        return image ? `data:image/png;base64,${image.encodeToBase64()}` : null;
      }
    },
    viewprot: {},
    dispatchEvents,
    getChartSize: () => {
      return {
        width: initialWidth,
        height: initialHeight
      };
    }
  }), [dispatchEvents, initialWidth, initialHeight, canvasRef]);
  return svgString ? /*#__PURE__*/React.createElement(View, {
    testID: "component",
    style: {
      ...style,
      width,
      height
    }
  }, /*#__PURE__*/React.createElement(Canvas, {
    style: {
      ...style,
      width,
      height
    },
    pointerEvents: "auto",
    ref: canvasRef
  }, /*#__PURE__*/React.createElement(ImageSVG, {
    svg: svgString,
    x: 0,
    y: 0,
    width: width,
    height: height
  })), handleGesture ? /*#__PURE__*/React.createElement(GestureHandler, _extends({
    dispatchEvents: dispatchEvents
  }, gestureProps)) : null) : null;
}
const SkiaChart = /*#__PURE__*/memo( /*#__PURE__*/forwardRef(SkiaComponent));
SkiaChart.displayName = 'SkiaChart';
export default SkiaChart;
//# sourceMappingURL=skiaChart.js.map