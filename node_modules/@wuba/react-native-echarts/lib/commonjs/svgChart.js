"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  SVGRenderer: true
};
Object.defineProperty(exports, "SVGRenderer", {
  enumerable: true,
  get: function () {
    return _SVGRenderer.SVGRenderer;
  }
});
exports.default = void 0;
var _reactNativeSvg = _interopRequireWildcard(require("react-native-svg"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _platform = require("zrender/lib/core/platform");
var _platform2 = require("./utils/platform");
var _GestureHandler = require("./components/GestureHandler");
var _events = require("./components/events");
var _SVGRenderer = require("./SVGRenderer");
var _types = require("./types");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); } // import { DEFAULT_FONT_FAMILY } from './utils/font';
(0, _platform.setPlatformAPI)({
  measureText: _platform2.measureText
});
const tagMap = {
  svg: _reactNativeSvg.default,
  circle: _reactNativeSvg.Circle,
  ellipse: _reactNativeSvg.Ellipse,
  g: _reactNativeSvg.G,
  text: _reactNativeSvg.Text,
  tspan: _reactNativeSvg.TSpan,
  textPath: _reactNativeSvg.TextPath,
  path: _reactNativeSvg.Path,
  polygon: _reactNativeSvg.Polygon,
  polyline: _reactNativeSvg.Polyline,
  line: _reactNativeSvg.Line,
  rect: _reactNativeSvg.Rect,
  use: _reactNativeSvg.Use,
  image: _reactNativeSvg.Image,
  symbol: _reactNativeSvg.Symbol,
  defs: _reactNativeSvg.Defs,
  linearGradient: _reactNativeSvg.LinearGradient,
  radialGradient: _reactNativeSvg.RadialGradient,
  stop: _reactNativeSvg.Stop,
  clipPath: _reactNativeSvg.ClipPath,
  pattern: _reactNativeSvg.Pattern,
  mask: _reactNativeSvg.Mask
};
function toCamelCase(str) {
  var reg = /-(\w)/g;
  return str.replace(reg, function (_, $1) {
    return $1.toUpperCase();
  });
}
const fontStyleReg = /([\w-]+):([\w-]+)/;
function SvgEle(props) {
  const {
    node
  } = props;
  if (!node) return null;
  const {
    tag,
    text,
    children
  } = node;
  // const Tag = tagMap[tag as keyof typeof tagMap];
  // @ts-ignore
  const Tag = tagMap[tag];
  if (!Tag) return null;
  const attrs = Object.entries(node.attrs).reduce((carry, [key, value]) => {
    carry[toCamelCase(key)] = value;
    return carry;
  }, {});
  if (tag === 'text') {
    if (attrs.style) {
      // TODO: 全局替换字体做法比较暴力，或者实用定义字体，可能某些场景字体设置失效，需要修复
      // attrs.style = attrs.style.replace(new RegExp(zrenderFontFamily, 'g'), DEFAULT_FONT_FAMILY);

      const matches = attrs.style.split(';');
      matches.filter(match => fontStyleReg.test(match)).forEach(match => {
        var _parts$, _parts$2;
        const parts = match.split(':');
        const key = (_parts$ = parts[0]) === null || _parts$ === void 0 ? void 0 : _parts$.trim();
        let value = (_parts$2 = parts[1]) === null || _parts$2 === void 0 ? void 0 : _parts$2.trim();
        if (key) {
          // echart里默认字体sans-serif，ios无法识别
          if (_reactNative.Platform.OS === 'ios' && key === 'font-family' && value === 'sans-serif') {
            value = 'Helvetica Neue';
          }
          attrs[toCamelCase(key)] = value;
        }
      });
    }
    if (!attrs.alignmentBaseline && attrs.dominantBaseline) {
      attrs.alignmentBaseline = 'middle';
    }
    // fix: https://github.com/react-native-svg/react-native-svg/issues/1862
    if (attrs.paintOrder === 'stroke') {
      attrs.strokeWidth = 0;
    }
    // fixed svg fillOpacity bug in some render processes
    if (attrs.fillOpacity === undefined) {
      attrs.fillOpacity = 1;
    }
    return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Text, attrs, text);
  }
  // fix: https://github.com/react-native-svg/react-native-svg/issues/983
  if (attrs.clipPath && !attrs.clipRule && _reactNative.Platform.OS === 'android') {
    attrs.clipRule = 'nonzero';
  }
  if (tag === 'path') {
    // 全部数据为空，iOS渲染有问题，无效的path过滤掉
    if (!attrs.d) return null;
    return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.Path, attrs);
  }
  if (tag === 'linearGradient' || tag === 'radialGradient') {
    // note: 强制刷新渐变
    // https://github.com/software-mansion/react-native-svg/issues/1762
    return /*#__PURE__*/_react.default.createElement(Tag, attrs, children === null || children === void 0 ? void 0 : children.map(child => SvgEle({
      node: child
    })));
  }
  return /*#__PURE__*/_react.default.createElement(Tag, _extends({
    key: node.key
  }, attrs), children === null || children === void 0 ? void 0 : children.map(child => /*#__PURE__*/_react.default.createElement(SvgEle, {
    key: child.key,
    node: child
  })));
}
function SvgRoot(props) {
  const {
    node
  } = props;
  const {
    attrs,
    children
  } = node;
  const {
    width,
    height,
    viewBox
  } = attrs;
  return /*#__PURE__*/_react.default.createElement(_reactNativeSvg.default, {
    width: width,
    height: height,
    viewBox: viewBox
  }, children === null || children === void 0 ? void 0 : children.map(child => /*#__PURE__*/_react.default.createElement(SvgEle, {
    key: child.key,
    node: child
  })));
}
function SvgComponent(props, ref) {
  var _svgNode$attrs2, _svgNode$attrs4;
  const {
    node,
    style,
    handleGesture = true,
    ...gestureProps
  } = props;
  const [svgNode, setSvgNode] = (0, _react.useState)(node);
  const width = (0, _react.useMemo)(() => {
    var _svgNode$attrs;
    return Number(((svgNode === null || svgNode === void 0 || (_svgNode$attrs = svgNode.attrs) === null || _svgNode$attrs === void 0 ? void 0 : _svgNode$attrs.width) || (style === null || style === void 0 ? void 0 : style.width)) ?? 0);
  }, [svgNode === null || svgNode === void 0 || (_svgNode$attrs2 = svgNode.attrs) === null || _svgNode$attrs2 === void 0 ? void 0 : _svgNode$attrs2.width, style === null || style === void 0 ? void 0 : style.width]);
  const height = (0, _react.useMemo)(() => {
    var _svgNode$attrs3;
    return Number(((svgNode === null || svgNode === void 0 || (_svgNode$attrs3 = svgNode.attrs) === null || _svgNode$attrs3 === void 0 ? void 0 : _svgNode$attrs3.height) || (style === null || style === void 0 ? void 0 : style.height)) ?? 0);
  }, [svgNode === null || svgNode === void 0 || (_svgNode$attrs4 = svgNode.attrs) === null || _svgNode$attrs4 === void 0 ? void 0 : _svgNode$attrs4.height, style === null || style === void 0 ? void 0 : style.height]);
  const zrenderId = (0, _react.useRef)();
  const dispatchEvents = (0, _react.useCallback)((types, nativeEvent, eventArgs) => {
    if (zrenderId.current === undefined) return;
    (0, _events.dispatchEventsToZRender)(zrenderId.current, types, nativeEvent, eventArgs);
  }, []);
  (0, _react.useImperativeHandle)(ref, () => ({
    elm: {
      setAttribute: (_name, _value) => {},
      setAttributeNS: (_name, _value) => {},
      removeAttribute: _name => {},
      patch: (_oldVnode, vnode) => {
        setSvgNode(vnode);
      },
      setZrenderId: id => {
        zrenderId.current = id;
      }
    },
    dispatchEvents,
    getChartSize: () => {
      return {
        width,
        height
      };
    }
  }), [dispatchEvents, width, height]);
  return svgNode ? /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    testID: "component",
    style: {
      ...style,
      width,
      height
    }
  }, /*#__PURE__*/_react.default.createElement(SvgRoot, {
    node: svgNode
  }), handleGesture ? /*#__PURE__*/_react.default.createElement(_GestureHandler.GestureHandler, _extends({
    dispatchEvents: dispatchEvents
  }, gestureProps)) : null) : null;
}
const SvgChart = /*#__PURE__*/(0, _react.memo)( /*#__PURE__*/(0, _react.forwardRef)(SvgComponent));
SvgChart.displayName = 'SvgChart';
var _default = exports.default = SvgChart;
//# sourceMappingURL=svgChart.js.map