"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SVGRenderer = SVGRenderer;
var _env = _interopRequireDefault(require("zrender/lib/core/env"));
var _Painter = _interopRequireDefault(require("zrender/lib/svg/Painter"));
var _SVGCore = require("./SVGCore");
var _patch = require("zrender/lib/svg/patch");
var _xmldom = require("@xmldom/xmldom");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
_env.default.svgSupported = true;
global.DOMParser = _xmldom.DOMParser;
class CustomSVGPainter extends _Painter.default {
  constructor(root, storage, opts, id) {
    var _this$_svgDom$setZren, _this$_svgDom;
    // Prioritize taking the width and height set in the configuration;
    // if not available, then take the width and height set in the styles.
    const {
      width,
      height
    } = root.getChartSize();
    opts.width = opts.width || width;
    opts.height = opts.height || height;
    // @ts-ignore
    super(null, storage, opts);
    // @ts-ignore
    this._svgDom = this._oldVNode.elm = root.elm;
    // @ts-ignore
    (_this$_svgDom$setZren = (_this$_svgDom = this._svgDom).setZrenderId) === null || _this$_svgDom$setZren === void 0 || _this$_svgDom$setZren.call(_this$_svgDom, id);
    // @ts-ignore
    (0, _patch.updateAttrs)(null, this._oldVNode);
    this.root = root;
  }
  refresh() {
    const vnode = this.renderToVNode({
      willUpdate: true
    });
    // Disable user selection.
    vnode.attrs.style = 'position:absolute;left:0;top:0;user-select:none';
    // @ts-ignore
    if (this._svgDom.patch) {
      // @ts-ignore
      this._svgDom.patch(this._oldVNode, vnode);
      // @ts-ignore
    } else if (this._svgDom.patchString) {
      // @ts-ignore
      this._svgDom.patchString(this._oldVNode, (0, _SVGCore.vNodeToString)(vnode));
    }
    // @ts-ignore
    this._oldVNode = vnode;
  }
  toDataURL(base64) {
    var _this$_svgDom$makeIma, _this$_svgDom2;
    // @ts-ignore
    return ((_this$_svgDom$makeIma = (_this$_svgDom2 = this._svgDom).makeImageSnapshot) === null || _this$_svgDom$makeIma === void 0 ? void 0 : _this$_svgDom$makeIma.call(_this$_svgDom2)) || super.toDataURL(base64);
  }
}
function SVGRenderer(registers) {
  registers.registerPainter('svg', CustomSVGPainter);
}
//# sourceMappingURL=SVGRenderer.js.map