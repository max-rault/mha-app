"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RNGestureHandler = RNGestureHandler;
exports.getDefaultTapRNGesture = exports.getDefaultRNGestures = exports.getDefaultPinchRNGesture = exports.getDefaultPanRNGesture = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _styles = require("./styles");
var _throttle = require("../utils/throttle");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const getDefaultPanRNGesture = (Gesture, dispatchEvents) => {
  return Gesture.Pan().runOnJS(true).withTestId('RNGH-pan-handler').maxPointers(1).onBegin(e => {
    dispatchEvents(['mousedown', 'mousemove'], e);
  }).onUpdate((0, _throttle.throttle)(e => {
    dispatchEvents(['mousemove'], e);
  }, 50)).onEnd(e => {
    dispatchEvents(['mouseup'], e);
  });
};
exports.getDefaultPanRNGesture = getDefaultPanRNGesture;
const getDefaultPinchRNGesture = (Gesture, dispatchEvents) => {
  return Gesture.Pinch().runOnJS(true).withTestId('RNGH-pinch-handler').onUpdate((0, _throttle.throttle)(e => {
    dispatchEvents(['mousewheel'], e, {
      zrX: e.focalX,
      zrY: e.focalY,
      zrDelta: e.velocity / 20
    });
  }, 50));
};
exports.getDefaultPinchRNGesture = getDefaultPinchRNGesture;
const getDefaultTapRNGesture = (Gesture, dispatchEvents) => {
  return Gesture.Tap().runOnJS(true).withTestId('RNGH-tap-handler').onStart(e => {
    dispatchEvents(['mousedown', 'mousemove'], e);
  }).onEnd(e => {
    dispatchEvents(['mouseup', 'click'], e);
  });
};
exports.getDefaultTapRNGesture = getDefaultTapRNGesture;
const getDefaultRNGestures = (Gesture, dispatchEvents) => {
  return [getDefaultPanRNGesture(Gesture, dispatchEvents), getDefaultPinchRNGesture(Gesture, dispatchEvents), getDefaultTapRNGesture(Gesture, dispatchEvents)];
};
exports.getDefaultRNGestures = getDefaultRNGestures;
function RNGestureHandler({
  RNGH,
  dispatchEvents,
  gesture: gestureProp
}) {
  const {
    Gesture,
    GestureDetector
  } = RNGH;
  const defaultGestures = (0, _react.useMemo)(() => getDefaultRNGestures(Gesture, dispatchEvents), [dispatchEvents, Gesture]);
  const propGesture = (0, _react.useMemo)(() => {
    if (!gestureProp) {
      return defaultGestures;
    }
    if (typeof gestureProp === 'function') {
      return gestureProp(defaultGestures, dispatchEvents);
    }
    return gestureProp;
  }, [defaultGestures, dispatchEvents, gestureProp]);
  const gesture = (0, _react.useMemo)(() => {
    if (Array.isArray(propGesture)) {
      return Gesture.Race(...propGesture);
    }
    return propGesture;
  }, [Gesture, propGesture]);
  return /*#__PURE__*/_react.default.createElement(GestureDetector, {
    gesture: gesture
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    testID: "gesture-handler",
    style: _styles.styles.GestureView
  }));
}
//# sourceMappingURL=RNGestureHandler.js.map